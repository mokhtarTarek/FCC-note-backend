{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","noteService","getAll","axios","get","then","res","data","create","newObject","post","update","id","put","response","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToWhow","filter","map","find","n","changedNote","returnedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObj","date","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAYeA,EAVF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,iBACfC,EAAQF,EAAKG,UAClB,qBACD,iBACI,OACE,qBAAIC,UAAU,OAAd,cAAwBJ,EAAKK,QAC7B,yBAAQC,QAASL,EAAjB,cAAsCC,EAAtC,WCKSK,EAXM,SAAC,GAAc,IAAbC,EAAY,EAAZA,QACnB,OAAgB,OAAZA,EACO,KAGP,qBAAKJ,UAAU,QAAf,SACKI,K,gBCLPC,EAAU,aAuBDC,EALX,CACAC,OAjBW,WAEX,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAgB7BC,OAbW,SAAAC,GAEX,OADgBN,IAAMO,KAAKV,EAAQS,GACpBJ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAY7BI,OATW,SAACC,EAAGH,GAEf,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAKH,GAC9BJ,MAAK,SAAAS,GAAQ,OAAEA,EAASP,UCZrCQ,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAM,QACNC,UAAW,SACXC,SAAS,IAGT,UACE,uBACA,2GAiGSC,MA3Ff,WAGE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,eAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAGDC,qBAAU,WACR7B,EACCC,SACAG,MAAK,SAAA0B,GACLR,EAASQ,QAGR,IAGH,IAsBMC,EAAcN,EAAUJ,EAAQA,EAAMW,QAAO,SAAA1C,GAAI,OAAuB,IAAnBA,EAAKG,aAsBhE,OACE,gCACE,2CACA,cAAC,EAAD,CAAcK,QAAW6B,IACzB,qBAAK/B,QAAS,kBAAM8B,GAAYD,IAAhC,SACE,2CAAcA,EAAU,YAAc,MAAtC,SAEF,6BACGM,EAAYE,KAAI,SAAA3C,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAhCD,SAACoB,GAC1B,IAAMrB,EAAO+B,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOA,KAChCyB,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAC9CO,EACAU,OAAOC,EAAIyB,GACVhC,MAAK,SAAAiC,GACJf,EAASD,EAAMY,KAAI,SAAA3C,GAAI,OAAIA,EAAKqB,KAAOA,EAAKrB,EAAO+C,SAEpDC,OAAM,SAAAC,GACNX,EAAgB,YAAD,OACFtC,EAAKK,QADH,qCAIf6C,YAAW,kBAAIZ,EAAgB,QAAM,KAEpCN,EAASD,EAAMW,QAAO,SAAAG,GAAC,OAAIA,EAAExB,KAAOA,SAiBR8B,CAAmBnD,EAAKqB,MAF3CrB,EAAKqB,SAMhB,uBAAM+B,SA5DM,SAAAC,GACdA,EAAEC,iBAEF,IAAMC,EAAU,CACdlD,QAAS4B,EACTuB,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG3BlD,EACCO,OAAOsC,GACPzC,MAAK,SAAAiC,GAEJf,EAAS,GAAD,mBAAKD,GAAL,CAAYgB,KACpBb,EAAW,QA8Cb,UACE,uBACE2B,MAAO5B,EACP6B,SA7CkB,SAAAT,GACxBnB,EAAWmB,EAAEU,OAAOF,UA8ChB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCrGNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0bde37ae.chunk.js","sourcesContent":["import React from 'react'\r\n//the Note compo has functionnality toggleImportance\r\nconst Note = ({ note,toggleImportance }) => {\r\nconst label = note.important\r\n?\"make not important\":\r\n\"make important\"\r\n    return (\r\n      <li className=\"note\" > {note.content}\r\n      <button onClick={toggleImportance} > {label} </button>\r\n      </li>\r\n    )\r\n  }\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({message})=> {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className=\"error\" >\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import axios from 'axios'\r\n\r\n// const baseUrl = 'https://boiling-wildwood-59895.herokuapp.com/api/notes'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(res=>res.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl,newObject)\r\n    return request.then(res=>res.data)\r\n}\r\n\r\nconst update = (id,newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`,newObject)\r\n    return request.then(response=>response.data)\r\n}\r\n\r\nconst noteService = \r\n    {\r\n    getAll,\r\n    create,\r\n    update\r\n    }\r\nexport default noteService;","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst Footer = ()=>{\n  const footerStyle = {\n    color:'green',\n    fontStyle: 'italic',\n    fontSize:16,\n  }\n  return(\n    <div style={footerStyle} >\n      <br/>\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\n\nfunction App() {\n\n  //--------------------CONSTANTS-------------------------\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  //--------------------EFFECT----------------------------\n  \n useEffect(() => {\n   noteService\n   .getAll()\n   .then(initialNotes=>{\n    setNotes(initialNotes)\n   }\n   )\n  }, [])\n  //--------------------EVENTS HANDLER-------------------------\n\n  const addNote = e => {\n    e.preventDefault()\n    //console.log('button clicked',e.target)\n    const noteObj = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,//true or false depend of the result\n      //id: notes.length + 1\n    }\n      noteService\n      .create(noteObj)\n      .then(returnedNote => {\n        //setNotes([...notes, noteObj])\n        setNotes([...notes, returnedNote])\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChanges = e => {\n    setNewNote(e.target.value)\n  }\n\n  const notesToWhow = showAll ? notes : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n      noteService\n     .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(err=>{\n       setErrorMessage(\n        `the note ${note.content} was already deleted from server`\n       )\n       //disable error message after 5 sec\n       setTimeout(()=>setErrorMessage(null),5000)\n        //filter the notes state\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n  //-------------------- RENDER--------------------------------  \n\n  return (\n    <div>\n      <h3>Notes-App</h3>\n      <Notification message = {errorMessage}/>\n      <div onClick={() => setShowAll(!showAll)} >\n        <button>show {showAll ? \"important\" : \"all\"} </button>\n      </div>\n      <ul>\n        {notesToWhow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote} >\n        <input\n          value={newNote}\n          onChange={handleNoteChanges}\n        />\n        <button type=\"submit\" >save</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}